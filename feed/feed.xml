<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>Nick Jantz</title>
	<subtitle>I am writing about anything I want</subtitle>
	
	<link href="https://nickjantz.com/feed/feed.xml" rel="self"/>
	<link href="https://nickjantz.com/"/>
	<updated>2023-03-02T00:00:00Z</updated>
	<id>https://nickjantz.com/</id>
	<author>
		<name>Nick Jantz</name>
		<email>thenickjantz@gmail.com</email>
	</author>
	
	<entry>
		<title>Kona Run Data Analysis Part 1</title>
		<link href="https://nickjantz.com/posts/kona-data-part-1/"/>
		<updated>2023-03-02T00:00:00Z</updated>
		<id>https://nickjantz.com/posts/kona-data-part-1/</id>
		<content type="html">&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;Entalpi, the company that works with Gustav Iden and Kristian Blummenfelt recently released some raw data from the run at Kona 2022.&lt;/p&gt;
&lt;p&gt;I am going to be taking a basic look at some of the data released in a series of Jupyter Notebooks as a way of further my skills.&lt;/p&gt;
&lt;p&gt;Data and more info can be found on their Github here:
&lt;a href=&quot;https://github.com/entalpi-no/kona-2022&quot;&gt;https://github.com/entalpi-no/kona-2022&lt;/a&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Article about taking over a failed IOT company</title>
		<link href="https://nickjantz.com/posts/interesting-maker-blog-article/"/>
		<updated>2023-01-12T00:00:00Z</updated>
		<id>https://nickjantz.com/posts/interesting-maker-blog-article/</id>
		<content type="html">&lt;p&gt;I recently came across this post about taking over a dead IOT company that really intrigued me.&lt;/p&gt;
&lt;p&gt;https://blog.kchung.co/taking-over-a-dead-iot-company/&lt;/p&gt;
&lt;p&gt;The first reason I got into Development was through wanting to learn how to code after picking up a raspberry pi and a simple LED matrix from Alibaba. I had recently stumbled across the CTA open API and wanted to make essentially the exact same thing that this company tried to do. I even remember seeing this product on Facebook and Instagram ads and thinking, should I just buy this product instead of doing it myself.&lt;/p&gt;
&lt;p&gt;I even at one point had a dream of making a similar product and selling it, almost identically to using a raspberry pi in the frame to control an led matrix.&lt;/p&gt;
&lt;p&gt;I mainly wanted to share because I think the author takes an honest look at what happened not just from a tech perspective but also from a business perspective. It can be tough work running a product company that has to provide ongoing support and an API to devices in the world long after they&#39;re sold. For every company like this that actually ended up getting started and selling physical products, there&#39;s definitely about 100 entrepreneurs that had an idea but didn&#39;t take it all the way to sales because they couldn&#39;t figure out how to continue providing the service expected long after the physical product is in the customers hands.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Learning with Large Datasets</title>
		<link href="https://nickjantz.com/posts/learning-with-large-datasets/"/>
		<updated>2022-12-30T00:00:00Z</updated>
		<id>https://nickjantz.com/posts/learning-with-large-datasets/</id>
		<content type="html">&lt;p&gt;In my learning data science I like to work with publicly available datasets. There are quite a few places to get this, but one that I keep going back to are some of the open data sets from &lt;a href=&quot;https://data.cityofchicago.org/&quot;&gt;Chicago&lt;/a&gt; and &lt;a href=&quot;https://opendata.cityofnewyork.us/&quot;&gt;New York&lt;/a&gt;. They just have great documentation and easy to download sets of data. The problem is they&#39;re often on the larger size and can take up a lot of computing resources for something like a Jupyter notebook where you may be working a lot when first learning.&lt;/p&gt;
&lt;p&gt;Luckily, you can go ahead and make mini versions of these datasets and then use them for any exploratory purposes before running full scripts on them, if you so choose. Here I will show you my approach to doing that. I realize there&#39;s ways to do this possibly by doing something like &lt;code&gt;ECHO head dataset.json &amp;gt; mini-dataset.json&lt;/code&gt; but for purposes of learning I wanted to test my python skills. &lt;em&gt;Edit note: see bottom of page for a simple 1 liner in bash&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;My goal was to take all my data files, stored in a single folder and make versions of them starting with mini-*** to make them easier to work with. Maybe only 100-200 rows long.&lt;/p&gt;
&lt;p&gt;Since I&#39;m doing this on all my data files I need to first gather them all in a list to loop through them. Coming from the web dev/JS world I am absolutely in love with list comprehensions.&lt;/p&gt;
&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; os&lt;br /&gt;&lt;br /&gt;files &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; os&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;listdir&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;endswith&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.csv&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From there I will read through each file&lt;/p&gt;
&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; files&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Read the file into a pandas data frame&lt;/p&gt;
&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;read_file &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; pd&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;read_csv&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&quot;data/&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Write the first 150 lines into my new file&lt;/p&gt;
&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;read_file&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;to_csv&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&quot;mini-&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Final file looks like&lt;/p&gt;
&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; os&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; pd&lt;br /&gt;&lt;br /&gt;files &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; os&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;listdir&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;endswith&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.csv&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; files&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  read_file &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; pd&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;read_csv&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&quot;data/&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  read_file&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;to_csv&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&quot;mini-&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As mentioned above the 1 liner in bash to achieve the same:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for FILE in *.csv; do head -n 151 $FILE &amp;gt; &amp;quot;mini-$FILE&amp;quot;; done
&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
</feed>
